0803
form은 진짜진짜진짜 중요
현재 문서에 있는 모든 form들을 부르는 명령어
ㄴ document.forms
ㄴ 이거 배열임!
ㄴ 폼을 다 부르면 폼이 인정한 태그만 오게 되는데 input, select, button 등등이 있음
ㄴ label 취급안함, table도
함수를 만드는 방법은 여러가지가 있따
function exe() {} 이거랑 let exe = function() {} 이거랑 같음!
인덱스에서 배열의 길이(length)-1은 배열의 마지막 요소를 말한다
document.forms[0].elements
=> elements도 배열임
document.forms[0] 이거를
만약 함수 exe(this.form) 하고 exe(gg)함수에서 
document.forms[0] => gg 로 바꿀 수 있음
근데 이렇게 아예 this.form을 못 넣어주는 경우가 있따 그럴때  document.forms[0]이걸 넣어서 써주는거임
ar[i].value == "" -> 이러면 공백만 입력한게 걸리지가 않는다 그래서 trim도 해주고 length의 길이제한도 걸어줘서 완벽 봉쇄
break; //가장 가까운. 반복문 탈출
return은 호출한 함수의 처음으로 돌아가는것이여서 return밑의 어떠한 작업이 있다면 그것을 수행하지 못하고 처음부터 다시 수행하는 과정이 실행되버림
제어가 여기왔을 때는 두가지 상황 중 하나다.
1. break를 만났다 뭔가 잘못됬따
 2. for문을 다 수행해서 끝났을 때
근데 이걸 어떻게 구분해
=> 불리언변수 선언
td의 속성에 원하는 속성을 넣어주고싶으면 data- 라는 명령어에 예를들어 data-name=""이렇게 설정해서 원하는 것을 넣어서 써줄수있
ㄴ> 이걸 가져올땐alert(ar[i].dataset.name +"를(을) 입력하세요"); 이렇게 써주면 된다
만약, data-tag-name 이렇게 설정해주면 카멜기법으로 함수에서 가져올땐 ar[i].dataset.tagName일케댐 바로 다음 문자를 대문자로 써준다.
결론!
data-name="" -> (ar[i].dataset.name
data-tag-name = "" ->ar[i].dataset.tagName
배열은 같은 자료형 여러개를 하나로 묶은 것!
   배열은 선언, 생성, 초기화 형식을 가진다.
   let ar1 = []; // 선언과 생성을 같이 했다.
배열은 같은 자료형의 index값들을 담아놓은거야
그리고 배열은 반복문으로 접근해서 쓰는게 많아
for문 안에서 if문을 사용할 때, break;를 if문 안에서 사용하는 방법(for문으로 돌아감)
근데 만약 if문의 조건을 빼고 나머지는 출력을 하고싶다 -> continue; 를 쓰면 for문의 다음 회차로 넘어가진다 그니까 for문의 i++로 간다는소리
while문
            while문의 구성
                while(조건식){
                    수행할 구문들..;
                    잘못쓰면 무한반복에 빠짐
                }
예시)
let i = 1;
while(i <= 10) {
            document.write(i +"<br/>");
            
            if(i%3 == 0) {
                break;
            }
            ++i; // 증감식 (이 부분이 생략되면 while문은 무한반복에 빠져버렷)
        }

한줄 한줄 꼬옥 주석 달아보기 이게 도움이짱~
다중반복문에서 안쪽에 있는 반복문은 열단위로 반복을 수행하고, 바깥에 있는 반복문은 행단위 반복을 목적으로 써준다!
=> 안쪽 : 열단위, 바깥쪽 : 행단윙
table#t1 -> id가 t1인 테이블이 만들어짐
let td1 = document.createElement("td");
ㄴ> 이게 td1변수 안에 td한줄을 만들어주는걸 담아준거임
0817

git/자바 - DB - jsp/spring,springboot - react - 프로젝트aws배포
잉 파이썬을 배운대여 후반부에,,
데이터 크롤링을 알려준대요

오전 : git-branch를 나눠보고 데이터확인,
오후 : 

깃의 레파지토리를 공유하고싶다
ㄴ 깃허브
ㄴ 레파지토리 : Working Directory, Staging Area(Index), .git Directory(Repository)

branch는 작업에 대한 흐름같은거
ㄴ 브랜치로 나눠서 작업해줘야 좋다
ㄴ 각 브랜치는 독립적인 작업공간
ㄴ 그래서 각각 브랜치들의 작업끼리 영향이 전 혀 임
ㄴ 여기서 테스트용브랜치, 다른용도 브랜치, 다른용도 브랜치 이렇게 다르게 해도 영향이없고 성공한거끼리 merge 하면되서 짱임
ㄴ 여기에 더해서 각각의 브랜치마다 다른사람이 맡아서 할 수도 잇음
ㄴ 내가 현재지금 있는 커밋이 HEAD임

git init 하기전에 git status로 git으로 관리되고 있는지 확인 후! 이닛한다
ㄴ git은 어엄청 까다로워서 공백하나라도 차이나면 에러나고 커밋안시켜주고 난리남

branch나누기
ㄴ git branch 브랜치이름
ㄴ git branch 라고만 쓰면 현재 생성된 branches를 보여줌
ㄴ 현재위치 브랜치는 앞에 *이 붙음
ㄴ git switch oldsong 브랜치 위치 옮기는 방법
ㄴ 그럼 그 master라고 적힌 자리에 옮긴브랜치이름으로 바뀜
ㄴ 옮긴브랜치에서 내용을 바꿔도 다시 마스터로 돌아가면 바뀐 내용도 원래대로 돌아감
ㄴ 그리고 마스터에 또 커밋하면 옮긴브랜치로그 사라지고 마스터로그만 기록되있음
ㄴ 브랜치에서 나가고싶다면 commit하고 나가야함 아니면 안나가짐
ㄴ 이때 저장은 좀 그렇고 나가고는 싶을때 stash(임시저장)
ㄴ 마스터로 와서 다시 브랜치 생성하기!
ㄴ git log --oneline --all --graph : 깃로그를  한줄로 모든브랜치들을 그래프로 보여조(개기여움)
ㄴ git switch -c emptylist :emptylist라는 브랜치를 만드는 동시에 이동해줘
ㄴ git add가 귀찮아 -> 그냥 바로 git commit -am "커밋메세지"
ㄴ 근데 처음생성된 파일은 불가
ㄴ 한번씩 add와 commit을 진행했던 파일만 가능
ㄴ 동시다발적으로 같은 파일에서 여러 작업이 가능하다!
ㄴ 결론적으로 마무리엔 master에 다 합쳐준다음 나머지 branch들은 쳐준다!
ㄴ git branch -d 지울폴더명 : 나머지 branches 지워줌
ㄴ 지우고자 하는 브랜치가 아닌 위치에서 지워줘야함
ㄴ 작업이 되있는 파일을 지우려고하면 에러뜸
ㄴ git branch -m 바꿀브랜치이름 : 브랜치이름변경
ㄴ 브랜치가 할 일이 끝나면 지워주자(-d 사용)
ㄴ 폴더 위치 옮겨서 가지치기 귀찮을때에는
ㄴ git switch -c (만들폴더명) (폴더만들폴더명)


git switch vs git checkout
ㄴ 기능이 똑같은데?
ㄴ 그럼머임 -> checkout은 옛날문법임
ㄴ checkout을 switch랑 restore로 나눠버림
ㄴ restore는 이전으로 돌리는것이엿음

Branch Merge
ㄴ 종류 2개 : fast-forward merge(기본), 3-way merge
ㄴ fast-forward merge: ffmerge 빨리감기merge/ main을 브랜치로 땡긴다(메인 내용의 변화가 없는경우에만)
ㄴ 3-way merge: 이게 메인의 내용이 변화가 있는 경우 사용함, 나중에 다른 가지랑 합침(이때 코드의 충돌이 일어날 수 있음)
ㄴ 일단 마스터로 와야함
ㄴ 그 다음이 가지를 지목해서 합치겟다 해야함
ㄴ git switch master
ㄴ 충돌이나면 CONFLICT라고 뜸(같은 파일의 내용충돌)
ㄴ 충돌내용고치고 다시 커밋해라 그냥 커밋하면댐

git Diff
ㄴ 충돌이 낫을때 해결하는 명령어
ㄴ 근데 이거 쓰는거보단 git kraken or vsc같은거 쓰는게 더 좋긴함^_^
ㄴ 협업단계에서 좀 큰 역할을 함
ㄴ 두 커밋사이의 차이점을 보여줌
ㄴ 해보니까 마지막 커밋2개를 비교해서 알려주는거같음
ㄴ 기존의 내용과 새로운 내용을 알려줌
ㄴ add를 하기전에 diff가능
ㄴ git diff HEAD	현재 내가 위치한곳에서 diff되는 모든것을 보여줌
ㄴ 브랜치를 나눴을 때의 diff
ㄴ git diff master...location ...을 기준으로 비교해주고 싶은 폴더명을 작성해줌
ㄴ 커밋과 커밋사이의 diff도 가능
ㄴ 그러려면 커밋의 고유번호를 알아야함.(--oneline의)
ㄴ -oneline쳣을때 더 밑에 있던 번호를 먼저 써줘야함(작성 명령문은 폴더의 비교명령와 똑같음)
ㄴ 그치만 많이 쓰진 않음^!^

git stash
ㄴ merge할때 필요했던 임시저장소
ㄴ 작업중인 브랜치 전환할때
ㄴ git stash
ㄴ 현재 설정된걸 저장해주고(뺏어감) 설정되기 전 상태로 돌려줌
ㄴ git stash pop 하면  stash된 모든 정보를 다 알려줌 저장해놨던거를 다시 꺼내는거임
ㄴ stash를 차곡차곡 쌓을 수 있음 
ㄴ git stash pop은 마지막에 저장된거를 뽑고 한번 사용하면 사라짐 (list에서도 사라짐)
ㄴ apply로 적용한 css의 stash설정 다시 거두려면
ㄴ git restore css파일명.css 하면된다
ㄴ pop을 쓰면 적용하고 다시 쓸수없음(일회성임)
ㄴ pop으로 설정한것도 restore로 거둬줌


Q. 그럼 oldsong은 머지하는거 아니면 버려지는데이터임?
Q. 하이픈 1개랑 2개차이
Q. ffmerge하면 뉴송이 그냥 뉴팝이 되는건가
Q. 그럼 첨에 뉴팝을 머지한건머지 playlist를 넣어주기위해서인가
Q.근데 터미널에서 navy가 나갓다가 다시추가로 찍히는데 맞느거아님? 컴터 관점ㅅ에서
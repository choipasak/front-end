0822

이클립스같은 것들을 통합개발환경툴이라고 한다.
ㄴ IDE()

패키지
ㄴ 클래스파일들을 모아놓은 것

기계어 vs 고급언어
ㄴ 기계어는 저급언어
ㄴ 우리가 쓰는 말과 비슷 할수록 고급언어
ㄴ 자바의 컴파일러가 기계어를 고급언어로 변환해준다

main 함수
ㄴ jvm이 파일을 실행할 때 가장 먼저 실행하는 함수

주석 꼬옥 많이 달기야~

ctrl+space를 많이 눌러보는 것이 좋다!
ㄴ 프로그램이 추천하는 명령어를 다 보여줌

주석
ㄴ 문서 생성용 주석은 시작이 /**로 시작하고 마무리는 */임
ㄴ 이건 배포용 문서에 설명을 달아 놓을 때 사용
ㄴ 색도 초록이 아니라 파란색이다

~JAVA~

변수(Variable)
ㄴ 내가 변수의 타입을 지정해줘야함.
ㄴ 변수는 이름의 중복을 조심해야 한다
ㄴ 먼저 변수를 지정해 주려면
ㄴ 1. 변수 타입 지정
ㄴ 2. 변수 선언![자료형(데이터 타입)] [변수명];
ㄴ 3. 변수 초기화!(initialization)
ㄴ 대부분 선언과 초기화를 동시에 해줌(처음생성시에만)
ㄴ 변수의 값으로 선언된 변수를 지정할 수도 있다.
ㄴ 자료형 = 변수 값의 타입
ㄴ 변수는 자료형이 달라도 변수명이 같으면 중복처리된다.
ㄴ 왜냐하면 stack에 저장될 때 데이터타입이 같이 저장되진 않기 때문!
ㄴ 변수는 선언하지 않는다면 사용불가
ㄴ 당연하게도 초기화가 되지 않은 변수도 사용불가

식별자(Identifier)
ㄴ 이름을 말함
ㄴ 1. 식별자의 이름은 중복을 허용하지 않습니다.
ㄴ 2. 대/소문자를 철저하게 구분합니다.
ㄴ 3. 식별자 이름은 숫자로 지정하거나 시작하면 안됩니다.
ㄴ 4. 식별자 이름에 '공백' 들어가면 안됩니다.
ㄴ camel case, snake case 등등
ㄴ Java 는 camel case로 작성을 많이 한다.
ㄴ 5. 식별자에 쓸 수 있는 특수문자는 밑줄(_), 달러기호($) 뿐입니다.
ㄴ 하지만 사용을 권장하지는 않습니다.
ㄴ 저 특수문자들은 사용하기로 약속된 곳이 지정되어 있습니다.
ㄴ final사용하는 상수의 식별자에 사용하기로 함
ㄴ 6. 키워드(예약어)는 식별자 이름으로 사용이 불가능합니다.
ㄴ 7. 한글이나 한자 같은 식별자 이름도 지정이 가능합니다만, 사용을 권장하지는 않습니다.
ㄴ 왜냐! 가독성이 저하된다. 그냥 공용어 쓴다 느낌,,

데이터 타입(Data Type)
ㄴ 자바의 기본 타입은 int이다.
ㄴ 정수형
ㄴ byte : 1byte크기의 정수형
   * 큰 용량이 필요없는 데이터에 사용
   *  파일의 입출력때 많이 사용
ㄴ short : 2byte크기의 정수형
   * int미만의 타입들은 c언어와의 호환성때문에 존재
ㄴ int(기본) : 4byte크기의 정수형 -21억 ~ 21억 정도
ㄴ long : 8byte크기의 정수형. 굉장히 큰 수를 지정할 수 있다.
   * long을 사용할 시, 리터럴 뒤에 L을 적어줘야 한다!
ㄴ 실수형
ㄴ float : 4byte / 뒤에 F붙여줘야함
ㄴ double(기본) : 8byte / 12자리 이상 표현 가능
ㄴ 논리형
ㄴ boolean
   * 줄여서 bool 타입이라고도함
   * 크기 : 1bit
   * 기본값 : false
   * 문자형
ㄴ char(character)
  * 홑따옴표(' ')사용
   * 2byte의 크기
   * 단일문자만 가능!
   * 유니코드
ㄴ String은 기본 데이터 타입이 아니다!
   * 공백도 ""안에 있으면 문자열의 하나로 인식
   * 문자열 : 문자가 일렬로 나열된 형태
  * 문자 1개가 2byte니까 문자열은?
  * 모름. 문자열의 길이를 모르니까!
  * 키워드(예약어)가 아님
  * String은 클래스 기반으로 생성된 객체 타입이다!
  * 기본 데이터 타입이 아니다!
  * 문자열 + 다른 데이터 타입 = 문자열
   * 덧셈 연산이 가능!

형변환(type casting)
ㄴ 항상 맞는 값만 넣을 수가 없다!
ㄴ 이럴 때 데이터타입을 변경해서 넣어줘야함
ㄴ 이걸 가능하기 위해서는 타입의 크기를 비교할 줄 알아야함
ㄴ 누가 더 큰 데이터 타입인가!
ㄴ 왜 float>long인가
ㄴ float은 실수까지 포함하니까
ㄴ boolean은 형변환의 대상이 아니여서 제외
ㄴ String은 크기를 정할 수가 없기 때문에 제외

자동 형변환(Implicit Conversion, Promotion, UpCasting)
ㄴ 자동으로 자바가 형변환을 해줌
ㄴ 값의 손실이 없는 경우

명시적 형변환(Explicit Conversion)
ㄴ 수동으로 내가 판단하고 형변환을 시켜야함
ㄴ 값의 손실 발생!하는데도 해야하면 내가 해야하는

저장구조
ㄴ byte를 예로 들면,
ㄴ 8비트의 맨 앞칸은 부호를 가리킴
ㄴ 그래서 byte는 총 7칸을 가지고 나타나게된다.

# 서로 타입이 다른 기본 데이터의 연산 시에는 데이터 타입이 큰 쪽에 작은 쪽이 맞춰져서 자동으로 형 변환이 진행된 뒤에 연산이 진행됩니다.

int k = 10;
double d = k / 4.0;
System.out.println(d);
ㄴ 왜 결과가 2.0일까!
ㄴ 먼저 int 자료형으로 나눈 후, double의 변수로 들어가기 때문에
ㄴ 결과는 2.0이 된다!
ㄴ 결과가 2.5가 나오게 하고 싶다면,
ㄴ k 나 4중에 한쪽을 double로 바꾸면 된다.
ㄴ (double)을 붙여주거나, .0을 붙여주거나
ㄴ 한쪽만 바꿔주면 된다!

# int보다 작은 크기의 데이터 연산은 자동으로 값이 int형으로 변환되어 처리됩니다.(데이터 손실의 방지)

%로 나누는 경우 : 조건으로 사용할때 ~로 나눠서 나머지가 0으로 나오는 경우!라고 조건을 줌

* 형변환의 예시
Math.random() : 0.0 <= ~ < 1.0 의 범위를 가진 난수(랜덤한 실수)받는 함수

표준 입/출력
ㄴ println() : 제일 많이 씀 / 개행 포함
ㄴ print() : 개행 미포함
ㄴ printf() : 형식 지정 표준 출력 함수 / 얘도 개행 미포함

* &nbsp; 1칸공백
  &ensp; 2칸공백
  &emsp; 4칸공백







Q. byte끼리 더할때 자바의 기본이int 여서 int로 받아주는건지






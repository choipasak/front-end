0823

집에서 깃허브받는법
ㄴ 집에서 폴더를 하나 만든다
ㄴ 베시연다
ㄴ git clone url주소 .
ㄴ 뒤에 .을 쓰지 않으면 그 원격레파지토리 폴더 자체가 오게된다
ㄴ 그리고 노트북의 폴더 확인하면 온걸 볼 수 있음
ㄴ 그리고 이클립스 실행(workspace를 만든 폴더로 연결)
ㄴ File에서 찾아서 여는게 아니라 import를 해야함
ㄴ General - Existing Project into - Java_Basic폴더선택
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
git과의 연동해서 eclipse 실행방법
ㄴ 새롭게 받을 폴더를 만듬
ㄴ 만든 빈폴더를 workspace로 한 eclipse실행
ㄴ 관점 : 자바로 바꿔줌
ㄴ 관점을 열면 git이라는게 있음 -> 선택
ㄴ Clone a Git repository를 누른다.
ㄴ 아니면 import에서 Project어쩌구도 있음
ㄴ 아무튼 clone a git저걸 누름
ㄴ깃저장소 주소를 복사해서 URI에 붙여준다.
ㄴ Authenticcation에는 깃허브 아디와비번 넣어주면된다.
ㄴ next 누르고 또 next 후에 만든폴더로 Directory를 바꿔준다.
ㄴ 다시 자바 관점으로 돌아와서 import - General - Projects from 어쩌구 - 디렉토리를 Java_basic선택
ㄴ 좋은점 : 관점을 git으로 바꾸고 바로 push 가능
ㄴ 이후에 또 받으려면 pull로 받으면 된다!
==================================================
* 선생님 깃허브의 readme.md에 위의 방법 적어주심

식별자에
ㄴ 의미없는 단어로 식별자 지정하지말라고한거 추가하기
ㄴ 예시. int i = 0; 넣어주기
ㄴ 이름짓기 어렵다 -> 구글에 변수명지어주는사이트ㄱㄱ

연산자
ㄴ 1 2 3항 연산자 다시쓰기
ㄴ 마지막 순서는 대입연산자인거 적기
ㄴ 증감의 부호가 뒤에붙는 후위연산은 대입연산자보다 순위가 떨어짐

표준출력에
ㄴ \" 랑 \' 넣


==================================================

표준 입력
ㄴ 자바는 따로 표준입력함수가 존재하지x
ㄴ Scanner라는 개체를 제공
ㄴ 사용하기 위해 먼저,
ㄴ 1. import java.util.Scanner; Scanner API를 받아온다.
1. Scanner API 로딩(제공되는 Scanner 정보를 현재 클래스로 가져오자)
ㄴ 2. 스캐너 객체를 생성.
ㄴ System.in 자바의 표준 입력 명령임 \ 반대로는 System.out이 있음 (sop의 그거)
ㄴ 스캐너의 데이터타입은 스캐터가 객체이므로 타입도 Scanner임
ㄴ Scanner sc = new Scanner(System.in);
ㄴ 좀 더 쉽게 만드는 방법
ㄴ 그냥 import그런거안하고 main에 scanner라고 적고 자동완성을 본다.
ㄴ 자동완성에서 java.util의 scanner를 가져옴
ㄴ 그리고 똑같이 작성해준다!
ㄴ import를 직접 하는 경우는 잘 없다!
ㄴ 3. Scanner의 함수들을 이용하여 데이터를 입력받을 수 있습니다.
함수들
- next(): 공백이 없는 문자열을 입력받습니다.
ㄴ 스캐너를 쓸거면 미리 예상해서 맞는 함수를 배치시켜놔야한다.
ㄴ 함수에 포인터를 대면 맨앞의 타입이 받는값의 타입임
ㄴ 입력을 받기 전에 입력에대한 안내같은 출력을 한줄 만들어 놔라!
ㄴ next()는 공백을 마주치면 프로그램을 끝냄
- nextLine(): 공백을 포함한 문자를 입력받습니다.
ㄴ 문자 사이에 공백이 있어도 그대로 입력받음
- next + 기본타입이름(): 해당 타입에 맞는 데이터를 입력받습니다.
ㄴ 예를들어 나이값을 입력 받는다고 한 경우,
   int age = sc.nextInt();
ex)
nextInt(): 정수 데이터를 입력받습니다.
nextDouble(): 실수 데이터를 입력받습니다.
ㄴ 4. Scanner 객체를 반납
객체를 반납 -> Scanner객체를 메모리에서 해제 시키겠다는 의미 (꼬옥 해줘야함)
=> sc.close();
ㄴ 사용을 한다고 바로 닫히진 않음. GC에게 명령을 내리는거임. 확실하게 GC에게 말해주는 느낌
ㄴ 사용해주는 이유 : 메모리의 누수방지를 위해 -> 만약 하루동시접속자가 10만명이라고 가정하면 모든 사람들이 scanner을 사용하니까 시스템이 느려짐.
ㄴ  다쓰고 close()잊지말라고!!!!!!!!!!!!!!!!@@@@@
ㄴ 스캐너 예제함


~제어문~ 기절할개
ㄴ 종류 : 조건문, 반복문, 탈출문
ㄴ 제어문으로 코드의 흐름을 제어할 수 있어진다.
ㄴ 조건문을 분기문이라고도 함(회색글씨)
ㄴ 조건문 (conditional statement)
ㄴ 입력받아 else if까지 사용해봄
ㄴ if문은 위에서 아래로 내려오니까 조건의 순서에 유의하자!
ㄴ 다중if문 nesting?
ㄴ # if의 중첩문 
- else if문이 첫번째 조건식이 false일 경우 분기를 나눴다면 if의 중첩문은 첫번째 조건식이 true인 경우 분기를 나누는 방식입니다.
          
# 변수의 사용 범위 (유효 범위)
- 변수는 선언된 블록 내에서만 유효합니다.
선언된 블록을 벗어나면 메모리에서 자동으로 소멸합니다.
- 변수를 선언할 때 사용 범위를 잘 파악해서 
전체적으로 사용할 변수라면 미리 선언해 두고,
지엽적으로 사용할 변수는 그 블록 범위 내에서만 사용하고
소멸시키는 것이 좋습니다.

switch, case문
ㄴ swtich문의 조건에는 실수x 오직 정수, 문자, 문자열 타입. 만 가능
ㄴ break; //해당 case만 실행하고 switch문을 종료해라!를 의미
ㄴ 코드는 위에서 아래로 흘러내린다는 특징을 이용해 case의 코드내용이 중복되는 경우에는 같은내용의 case위에 
'case 조건:' 만 추가해준다.
(예시로 적어주기)
ㄴ 가로로도 적어줄 수 있음.
ㄴ 공통된 내용을 적어줘야하는 조건이 많을 경우 switch문이 더 유용하다.
ㄴ /*
switch 괄호 안에 지정하신 기준값에 따라 
만족하는 case문을 순서대로 탐색합니다.
적합한 case가 존재하는 경우에는 해당 case에
종속된 문장을 실행합니다.
따로 조치가 없다면 나머지 케이스들이 연속적으로 실행됩니다.
*/
ㄴ switch문의 구성 : case+break, defualt
ㄴ 범위조건을 가진 내용은 if문이 더 유용함
ㄴ case 안에 if문을 사용할경우 코드 예시넣기
ㄴ if의에서 탈출하게되면 else를 다음 case가 맡게되는 경우도 있다

반복문(loop)
ㄴ for와 while!
ㄴ 예시코드 넣어주기
ㄴ 반복문은 반복하는 횟수를 정할 수 있어야함

while
ㄴ (제어변수, 논리형조건식, 증감식)를 잘 정해줘야함
ㄴ (begin, end, step)이라고도함
ㄴ 필수 3요소!
ㄴ 개수를 담는다고 하면 어렵게 생각하지 말고 그냥 개수용 변수를 만들어준 후 증감식으로 담아준다!
ㄴ 출력할때도 삼항연산자를 넣어 줄 수 있다!
ㄴ 마지막 소수판별 문제 올리기!





